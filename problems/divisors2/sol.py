# Note: To solve for primes, simply use Eratosthones to filter what your are checking for with
# To fix the nk//j=i? problem, use a prefix sum array to compute how many primes live between smallest and largest.

positions = ['1_1', '1_2', '2_1', '1_3', '3_1', '1_4', '2_2', '4_1', '1_5', '5_1', '1_6', '2_3', '3_2', '6_1', '1_7', '7_1', '1_8', '2_4', '4_2', '8_1', '1_9', '3_3', '9_1', '1_10', '2_5', '5_2', '10_1', '1_11', '11_1', '1_12', '2_6', '3_4', '4_3', '6_2', '12_1', '1_13', '13_1', '1_14', '2_7', '7_2', '14_1', '1_15', '3_5', '5_3', '15_1', '1_16', '2_8', '4_4', '8_2', '16_1', '1_17', '17_1', '1_18', '2_9', '3_6', '6_3', '9_2', '18_1', '1_19', '19_1', '1_20', '2_10', '4_5', '5_4', '10_2', '20_1', '1_21', '3_7', '7_3', '21_1', '1_22', '2_11', '11_2', '22_1', '1_23', '23_1', '1_24', '2_12', '3_8', '4_6', '6_4', '8_3', '12_2', '24_1', '1_25', '5_5', '25_1', '1_26', '2_13', '13_2', '26_1', '1_27', '3_9', '9_3', '27_1', '1_28', '2_14', '4_7', '7_4', '14_2', '28_1', '1_29', '29_1', '1_30', '2_15', '3_10', '5_6', '6_5', '10_3', '15_2', '30_1', '1_31', '31_1', '1_32', '2_16', '4_8', '8_4', '16_2', '32_1', '1_33', '3_11', '11_3', '33_1', '1_34', '2_17', '17_2', '34_1', '1_35', '5_7', '7_5', '35_1', '1_36', '2_18', '3_12', '4_9', '6_6', '9_4', '12_3', '18_2', '36_1', '1_37', '37_1', '1_38', '2_19', '19_2', '38_1', '1_39', '3_13', '13_3', '39_1', '1_40', '2_20', '4_10', '5_8', '8_5', '10_4', '20_2', '40_1', '1_41', '41_1', '1_42', '2_21', '3_14', '6_7', '7_6', '14_3', '21_2', '42_1', '1_43', '43_1', '1_44', '2_22', '4_11', '11_4', '22_2', '44_1', '1_45', '3_15', '5_9', '9_5', '15_3', '45_1', '1_46', '2_23', '23_2', '46_1', '1_47', '47_1', '1_48', '2_24', '3_16', '4_12', '6_8', '8_6', '12_4', '16_3', '24_2', '48_1', '1_49', '7_7', '49_1', '1_50', '2_25', '5_10', '10_5', '25_2', '50_1', '1_51', '3_17', '17_3', '51_1', '1_52', '2_26', '4_13', '13_4', '26_2', '52_1', '1_53', '53_1', '1_54', '2_27', '3_18', '6_9', '9_6', '18_3', '27_2', '54_1', '1_55', '5_11', '11_5', '55_1', '1_56', '2_28', '4_14', '7_8', '8_7', '14_4', '28_2', '56_1', '1_57', '3_19', '19_3', '57_1', '1_58', '2_29', '29_2', '58_1', '1_59', '59_1', '1_60', '2_30', '3_20', '4_15', '5_12', '6_10', '10_6', '12_5', '15_4', '20_3', '30_2', '60_1', '1_61', '61_1', '1_62', '2_31', '31_2', '62_1', '1_63', '3_21', '7_9', '9_7', '21_3', '63_1', '1_64', '2_32', '4_16', '8_8', '16_4', '32_2', '64_1', '1_65', '5_13', '13_5', '65_1', '1_66', '2_33', '3_22', '6_11', '11_6', '22_3', '33_2', '66_1', '1_67', '67_1', '1_68', '2_34', '4_17', '17_4', '34_2', '68_1', '1_69', '3_23', '23_3', '69_1', '1_70', '2_35', '5_14', '7_10', '10_7', '14_5', '35_2', '70_1', '1_71', '71_1', '1_72', '2_36', '3_24', '4_18', '6_12', '8_9', '9_8', '12_6', '18_4', '24_3', '36_2', '72_1', '1_73', '73_1', '1_74', '2_37', '37_2', '74_1', '1_75', '3_25', '5_15', '15_5', '25_3', '75_1', '1_76', '2_38', '4_19', '19_4', '38_2', '76_1', '1_77', '7_11', '11_7', '77_1', '1_78', '2_39', '3_26', '6_13', '13_6', '26_3', '39_2', '78_1', '1_79', '79_1', '1_80', '2_40', '4_20', '5_16', '8_10', '10_8', '16_5', '20_4', '40_2', '80_1', '1_81', '3_27', '9_9', '27_3', '81_1', '1_82', '2_41', '41_2', '82_1', '1_83', '83_1', '1_84', '2_42', '3_28', '4_21', '6_14', '7_12', '12_7', '14_6', '21_4', '28_3', '42_2', '84_1', '1_85', '5_17', '17_5', '85_1', '1_86', '2_43', '43_2', '86_1', '1_87', '3_29', '29_3', '87_1', '1_88', '2_44', '4_22', '8_11', '11_8', '22_4', '44_2', '88_1', '1_89', '89_1', '1_90', '2_45', '3_30', '5_18', '6_15', '9_10', '10_9', '15_6', '18_5', '30_3', '45_2', '90_1', '1_91', '7_13', '13_7', '91_1', '1_92', '2_46', '4_23', '23_4', '46_2', '92_1', '1_93', '3_31', '31_3', '93_1', '1_94', '2_47', '47_2', '94_1', '1_95', '5_19', '19_5', '95_1', '1_96', '2_48', '3_32', '4_24', '6_16', '8_12', '12_8', '16_6', '24_4', '32_3', '48_2', '96_1', '1_97', '97_1', '1_98', '2_49', '7_14', '14_7', '49_2', '98_1', '1_99', '3_33', '9_11', '11_9', '33_3', '99_1', '1_100', '2_50', '4_25', '5_20', '10_10', '20_5', '25_4', '50_2', '100_1', '1_101', '101_1', '1_102', '2_51', '3_34', '6_17', '17_6', '34_3', '51_2', '102_1', '1_103', '103_1', '1_104', '2_52', '4_26', '8_13', '13_8', '26_4', '52_2', '104_1', '1_105', '3_35', '5_21', '7_15', '15_7', '21_5', '35_3', '105_1', '1_106', '2_53', '53_2', '106_1', '1_107', '107_1', '1_108', '2_54', '3_36', '4_27', '6_18', '9_12', '12_9', '18_6', '27_4', '36_3', '54_2', '108_1', '1_109', '109_1', '1_110', '2_55', '5_22', '10_11', '11_10', '22_5', '55_2', '110_1', '1_111', '3_37', '37_3', '111_1', '1_112', '2_56', '4_28', '7_16', '8_14', '14_8', '16_7', '28_4', '56_2', '112_1', '1_113', '113_1', '1_114', '2_57', '3_38', '6_19', '19_6', '38_3', '57_2', '114_1', '1_115', '5_23', '23_5', '115_1', '1_116', '2_58', '4_29', '29_4', '58_2', '116_1', '1_117', '3_39', '9_13', '13_9', '39_3', '117_1', '1_118', '2_59', '59_2', '118_1', '1_119', '7_17', '17_7', '119_1', '1_120', '2_60', '3_40', '4_30', '5_24', '6_20', '8_15', '10_12', '12_10', '15_8', '20_6', '24_5', '30_4', '40_3', '60_2', '120_1', '1_121', '11_11', '121_1', '1_122', '2_61', '61_2', '122_1', '1_123', '3_41', '41_3', '123_1', '1_124', '2_62', '4_31', '31_4', '62_2', '124_1', '1_125', '5_25', '25_5', '125_1', '1_126', '2_63', '3_42', '6_21', '7_18', '9_14', '14_9', '18_7', '21_6', '42_3', '63_2', '126_1', '1_127', '127_1', '1_128', '2_64', '4_32', '8_16', '16_8', '32_4', '64_2', '128_1', '1_129', '3_43', '43_3', '129_1', '1_130', '2_65', '5_26', '10_13', '13_10', '26_5', '65_2', '130_1', '1_131', '131_1', '1_132', '2_66', '3_44', '4_33', '6_22', '11_12', '12_11', '22_6', '33_4', '44_3', '66_2', '132_1', '1_133', '7_19', '19_7', '133_1', '1_134', '2_67', '67_2', '134_1', '1_135', '3_45', '5_27', '9_15', '15_9', '27_5', '45_3', '135_1', '1_136', '2_68', '4_34', '8_17', '17_8', '34_4', '68_2', '136_1', '1_137', '137_1', '1_138', '2_69', '3_46', '6_23', '23_6', '46_3', '69_2', '138_1', '1_139', '139_1', '1_140', '2_70', '4_35', '5_28', '7_20', '10_14', '14_10', '20_7', '28_5', '35_4', '70_2', '140_1', '1_141', '3_47', '47_3', '141_1', '1_142', '2_71', '71_2', '142_1', '1_143', '11_13', '13_11', '143_1', '1_144', '2_72', '3_48', '4_36', '6_24', '8_18', '9_16', '12_12', '16_9', '18_8', '24_6', '36_4', '48_3', '72_2', '144_1', '1_145', '5_29', '29_5', '145_1', '1_146', '2_73', '73_2', '146_1', '1_147', '3_49', '7_21', '21_7', '49_3', '147_1', '1_148', '2_74', '4_37', '37_4', '74_2', '148_1', '1_149', '149_1', '1_150', '2_75', '3_50', '5_30', '6_25', '10_15', '15_10', '25_6', '30_5', '50_3', '75_2', '150_1', '1_151', '151_1', '1_152', '2_76', '4_38', '8_19', '19_8', '38_4', '76_2', '152_1', '1_153', '3_51', '9_17', '17_9', '51_3', '153_1', '1_154', '2_77', '7_22', '11_14', '14_11', '22_7', '77_2', '154_1', '1_155', '5_31', '31_5', '155_1', '1_156', '2_78', '3_52', '4_39', '6_26', '12_13', '13_12', '26_6', '39_4', '52_3', '78_2', '156_1', '1_157', '157_1', '1_158', '2_79', '79_2', '158_1', '1_159', '3_53', '53_3', '159_1', '1_160', '2_80', '4_40', '5_32', '8_20', '10_16', '16_10', '20_8', '32_5', '40_4', '80_2', '160_1', '1_161', '7_23', '23_7', '161_1', '1_162', '2_81', '3_54', '6_27', '9_18', '18_9', '27_6', '54_3', '81_2', '162_1', '1_163', '163_1', '1_164', '2_82', '4_41', '41_4', '82_2', '164_1', '1_165', '3_55', '5_33', '11_15', '15_11', '33_5', '55_3', '165_1', '1_166', '2_83', '83_2', '166_1', '1_167', '167_1', '1_168', '2_84', '3_56', '4_42', '6_28', '7_24', '8_21', '12_14', '14_12', '21_8', '24_7', '28_6', '42_4', '56_3', '84_2', '168_1', '1_169', '13_13', '169_1', '1_170', '2_85', '5_34', '10_17', '17_10', '34_5', '85_2', '170_1', '1_171', '3_57', '9_19', '19_9', '57_3', '171_1', '1_172', '2_86', '4_43', '43_4', '86_2', '172_1', '1_173', '173_1', '1_174', '2_87', '3_58', '6_29', '29_6', '58_3', '87_2', '174_1', '1_175', '5_35', '7_25', '25_7', '35_5', '175_1', '1_176', '2_88', '4_44', '8_22', '11_16', '16_11', '22_8', '44_4', '88_2', '176_1', '1_177', '3_59', '59_3', '177_1', '1_178', '2_89', '89_2', '178_1', '1_179', '179_1', '1_180', '2_90', '3_60', '4_45', '5_36', '6_30', '9_20', '10_18', '12_15', '15_12', '18_10', '20_9', '30_6', '36_5', '45_4', '60_3', '90_2', '180_1', '1_181', '181_1', '1_182', '2_91', '7_26', '13_14', '14_13', '26_7', '91_2', '182_1', '1_183', '3_61', '61_3', '183_1', '1_184', '2_92', '4_46', '8_23', '23_8', '46_4', '92_2', '184_1', '1_185', '5_37', '37_5', '185_1', '1_186', '2_93', '3_62']

def val(inp):

    import math, sys
    special, noccurences = list(map(int, inp.split("_")))

    # This occurs for number n*k.

    nk = special * noccurences
    nk -= 1

    # Notice that nk // j can only be a few different values (nk, nk/2, nk/3 already is much smaller after 3 iterations)
    # We can instead find, for i up until sqrt(n):
    # All j such that nk//j = i
    # Then simply compute nk//i for all remaining i.

    root = math.floor(math.sqrt(nk))

    print("nk", nk, file=sys.stderr)
    print("root", root, file=sys.stderr)

    nums = 0 # We start at index 1.
    for i in range(1, root+1):
        # What j satisfy nk//j=i?
        if i == 1:
            nums += nk - nk//2
            prev = nk // 2
            continue
        # Well, anything where i * j <= nk < (i+1)*j
        # In other words, start at nk//(i+1)
        # Ends when the previous barrier is hit
        smallest_excl = nk // (i+1)
        largest_incl = prev
        prev = smallest_excl
        nums += (largest_incl - smallest_excl) * i
        print(f"nk // j = {i} for ({smallest_excl}, {largest_incl}]", file=sys.stderr)
    # Now we need to find the rest
    for i in range(1, root+1):
        # Exclude the final entry for anything larger than special.
        if nk // i <= root:
            break
        nums += nk // i

    nk += 1

    root = math.floor(math.sqrt(nk))

    # Now we just need to add position for the final integer.
    if special * special < nk:
        # Simply count
        for i in range(1, special + 1):
            if nk % i == 0:
                nums += 1
    else:
        # Count total
        tot_turn = 0
        for i in range(1, root+1):
            if nk % i == 0:
                tot_turn += 1
        tot_turn *= 2
        if root * root == nk:
            tot_turn -= 1
        for i in range(1, root+1):
            if nk%i == 0 and nk // i > special:
                tot_turn -= 1
            elif nk%i == 0:
                break
        nums += tot_turn

    if nk == 1:
        # Previous doesn't work for base case
        return 1
    else:
        return nums

print(val(input()))

# for idx, pos in enumerate(positions):
#     print(pos)
#     assert val(pos) == idx+1
